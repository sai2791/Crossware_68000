from commands import *
import acorn

load(0x8000, "Crossware-68000XR-3.07D.rom", "65C02")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def absaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    val = memory_binary[addr]
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, str(val))


def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

def custom(addr):
    wordentry(addr,2)
    entry(addr+4)
    nonentry(addr)

def rts_code_rtp(addr):
    rts_code_ptr(addr +1, addr)

subroutine(0x8084, "unknown_star_command")
subroutine(0x8057, "help_service_call")
subroutine(0x8054, "brk_service_call")
subroutine(0x8052, "service_handler_exit")
label(0x80f7, "command_table")
label(0x80f8, "command_table+1")
rts_code_rtp(0x80ff)
entry(0x80f4)
subroutine(0x9d67, "crossware_68000_cmd")
rts_code_rtp(0x8106)
subroutine(0x86e6, "mcode_cmd")
rts_code_rtp(0x810d)
subroutine(0xa84e, "tsave_cmd")
rts_code_rtp(0x8114)
subroutine(0xa963, "vdump_cmd")
rts_code_rtp(0x811f)
subroutine(0xaaa5, "ramswitch_cmd")
rts_code_rtp(0x8128)
subroutine(0xaaf5, "romsoff_cmd")
string(0x812a)
rts_code_rtp(0x812c)
subroutine(0xa55d, "h_slash_cmd")
rts_code_rtp(0x8137)
subroutine(0xab9a, "sr1header_cmd")
rts_code_rtp(0x8142)
subroutine(0xab9e, "sr2header_cmd")
rts_code_rtp(0x814d)
subroutine(0xaba2, "sr3header_cmd")
rts_code_rtp(0x8153)
rts_code_rtp(0x815a)
rts_code_rtp(0x8160)
rts_code_rtp(0x8168)
subroutine(0xae2c, "send_cmd")
subroutine(0xadea, "srend_cmd")
subroutine(0xae99, "mdis_cmd")
subroutine(0xbf98, "crosscheck_command")
subroutine(0x816b, "check_if_alpha")
subroutine(0x8176, "check_if_alpha_set_carry")
subroutine(0x8177, "check_if_alpha_restore_a_return")
subroutine(0x8179, "check_if_ind2v_correct")
label(0xdec, "X_IND2V_Rom_number")
subroutine(0x8187, "check_if_ind2v_restore_a_x_y_return")
labelword(0xf6, "osrdsc_ptr")
entry(0x8919)
entry(0x891f)
subroutine(0x893d, "error_bad_opcode")
subroutine(0x89d3, "error_p_percent_not_even")
custom(0x8afa)
custom(0x8b76)
custom(0x8d49)
custom(0x8e15)
custom(0x8fcb)
custom(0xa091)
custom(0xa098)
custom(0xa11e)
entry(0x8fd6)
custom(0x91c4)
subroutine(0x91ed, "error_phase_lock")
subroutine(0x920b, "error_byte_space")
subroutine(0x9225, "error_bad_displacement")
subroutine(0x9217, "error_bad_register")
custom(0x93a1)
entry(0x93e6)
entry(0x93e9)
custom(0x94ce)
custom(0x94e0)
custom(0x94ea)
entry(0x94f0)
custom(0x94f8)
custom(0x9701)
entry(0x9707) #questionable
label(0x9727, "error_type_mismatch")
custom(0x973e)
custom(0x9771)
custom(0x97b9)
custom(0x97d2)
custom(0x9830)
custom(0x9920)
custom(0x9962)
custom(0x99b5)
custom(0x99ef)
custom(0x9a00)
custom(0x9a2d)
custom(0x9a3e)
custom(0x9aa0)
custom(0x9bb0)
custom(0x9bbe)
custom(0x9bc5)
custom(0x9bd3)
custom(0x9bea)
custom(0x9bfe)
custom(0x9c0c)
custom(0x9c1f)
custom(0x9c3d)
custom(0x9c50)
subroutine(0x9c5c, "error_duplicate_symbol")
subroutine(0x9c6e, "error_invalid_symbol")
custom(0x9c85)
custom(0x9f89)
custom(0xa04a)
custom(0xa1f7)
custom(0xa214)
custom(0xa21f)
custom(0xa24d)
custom(0xa258)
custom(0xa303)
custom(0xa4a4)
custom(0xa854)
custom(0xaa42)
custom(0xaa56)
custom(0xaabd)
custom(0xab1c)
label(0xabdb, "error_too_many_characters")
custom(0xabcc)
custom(0x8715)
custom(0x87c0)
custom(0x8851)
custom(0x885c)
custom(0x8863)
custom(0x886c)
custom(0x8889)
custom(0x88a3)
string(0xa032)
nonentry(0xa032)
entry(0xa03c)
entry(0xa005)
subroutine(0x855b, "print_inline_string")
string(0xa054)
nonentry(0xa054)
entry(0xa05d)
string(0xa06e)
nonentry(0xa06e)
entry(0xa076)
entry(0xa084)
string(0xa0de)
nonentry(0xa0de)
entry(0xa102)
entry(0xaa91)
string(0xaace)
nonentry(0xaace)
entry(0xaade)
string(0xab4a)
nonentry(0xab4a)
entry(0xab68)
entry(0xab69)
entry(0xab73)
string(0x9cc2)
nonentry(0x9cc1)
string(0x9d7a)
nonentry(0x9d7a)
subroutine(0x9de1, "print_text_wrong")
subroutine(0x9deb, "print_text_basic")
entry(0x9df5)
string(0x9dfb)
nonentry(0x9dfb)
entry(0x9dfe)
entry(0x9e17)
string(0x9e1f)
nonentry(0x9e1e)
label(0x9e38, "serial_number_byte_1")
label(0x9e39, "serial_number_byte_2")
label(0x9e3a, "serial_number_byte_3")
label(0x9e3b, "serial_number_byte_4")
byte(0x9e3c)
entry(0x9e4a)
entry(0x9e9a)
subroutine(0x9ee0, "old")
subroutine(0x9fde, "error_no_room_for_module")
subroutine(0x9ff3, "print_text_searching_for")
subroutine(0xa02f, "print_text_failed_in")
subroutine(0xa051, "print_text_module")
subroutine(0xa0db, "print_text_not_found_abort_retry")
string(0xaee0)
string(0xae9f)
nonentry(0xae9f)
entry(0xaeb4)
string(0xaecc)
nonentry(0xaecc)
entry(0xaee7)
subroutine(0x9db2, "tube_not_present")
entry(0x9dae)
label(0x9db1, "serial_number_check_digit")
subroutine(0x85a4, "error_escape")
subroutine(0x859f, "check_for_escape")
label(0xff, "escape_flag")
nonentry(0x991f)
subroutine(0x9945, "validate_serial_number")
subroutine(0x9970, "serial_number_valid")
immaddr(0xa7b8, 0xa7bc)
label(0xa799, "text_set_on_overflow_else_cleared")
subroutine(0xa81d, "print_stored_text")
label(0xa7c5, "text_set_if_result_zero_else_cleared")
label(0xa7ef, "text_set_if_result_negative_else_cleared")
immaddr(0xa7e7, 0xa7eb)
immaddr(0xa815, 0xa819)
subroutine(0xa81f, "print_stored_text_loop")
subroutine(0xa82c, "end_of_stored_text")
label(0xa830, "new_auto")
immaddr(0xa709, 0xa70d)
label(0xa6e5, "text_return_for_more_escape_exit")
label(0xa6c2, "text_condition_code_register")
label(0xa6ab, "text_not_affected")
immaddr(0xa6ba, 0xa6be)
immaddr(0xa6dd, 0xa6e1)
immaddr(0xa791, 0xa795)
label(0xa76b, "text_set_if_carry_generated_else_cleared")
subroutine(0xa83a, "get_filename_from_command_line")
subroutine(0xae5b, "error_file_not_found")
subroutine(0xae4e, "close_file_handle")
subroutine(0xae7e, "disable_vdu_enable_serial_port_and_spool")
subroutine(0xae6c, "write_to_buffer_if_space_available")
subroutine(0xae6d, "check_for_space_in_serial_output_buffer")
subroutine(0xae87, "disable_serial_enable_vdu_printer_spool")
entry(0xaf47)
string(0xaf36)
nonentry(0xaf36)
subroutine(0xaf4a, "print_bad_name")
entry(0xaf58)
label(0xaf56, "laf56")
subroutine(0x81a6, "handle_brk_service_call")
subroutine(0x80dc, "restore_everything_exit")
subroutine(0x9e02, "print_help_name")
subroutine(0x9df8, "print_text_no")
subroutine(0x9e18, "print_full_help_text")
labelword(0xdea, "X_IND2V")
label(0x444, "file_handle")
label(0xde9, "X_IND1V_Rom_number")
labelword(0xde7, "X_IND1V")
subroutine(0x9e92, "enter_language_rom")
subroutine(0x9e9a, "new_ind2v_code")
immaddr(0x9e50, 0x9e55)
subroutine(0x9ed7, "insert_keystroke")
subroutine(0x9ed2, "insert_keystroke_from_stack")
subroutine(0x9eee, "set_X_IND1_X_IND2_rom_number")
go()





